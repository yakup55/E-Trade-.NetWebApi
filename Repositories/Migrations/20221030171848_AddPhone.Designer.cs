// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Concrete.Context;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221030171848_AddPhone")]
    partial class AddPhone
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"), 1L, 1);

                    b.Property<string>("AboutDetails")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AboutImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            AboutDetails = "testtt",
                            AboutImage = "eeeeeeeeeeeeeeeeee"
                        },
                        new
                        {
                            AboutId = 2,
                            AboutDetails = "testtt",
                            AboutImage = "eeeeeeeeeeeeeeeeee"
                        },
                        new
                        {
                            AboutId = 3,
                            AboutDetails = "testtt",
                            AboutImage = "eeeeeeeeeeeeeeeeee"
                        });
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CategoryStatus")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryImage = "aaaa",
                            CategoryName = "Laptop",
                            CategoryStatus = true
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryImage = "aa",
                            CategoryName = "Akıllı Saat",
                            CategoryStatus = true
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryImage = "aa",
                            CategoryName = "Test Kitapları",
                            CategoryStatus = true
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryImage = "https://technext.github.io/cozastore/images/banner-01.jpg",
                            CategoryName = "Kadın",
                            CategoryStatus = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryImage = "https://technext.github.io/cozastore/images/banner-02.jpg",
                            CategoryName = "Erkek",
                            CategoryStatus = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Mavi"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "Sarı"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorName = "Kırmızı"
                        },
                        new
                        {
                            ColorId = 4,
                            ColorName = "Turuncu"
                        },
                        new
                        {
                            ColorId = 5,
                            ColorName = "Siyah"
                        },
                        new
                        {
                            ColorId = 6,
                            ColorName = "Beyaz"
                        },
                        new
                        {
                            ColorId = 7,
                            ColorName = "Gri"
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentName = "Test",
                            Message = "ehddhdhscb"
                        },
                        new
                        {
                            CommentId = 2,
                            CommentName = "Test",
                            Message = "ehddhdhscb"
                        },
                        new
                        {
                            CommentId = 3,
                            CommentName = "Test",
                            Message = "ehddhdhscb"
                        });
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Erkek"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Kadın"
                        });
                });

            modelBuilder.Entity("Entities.Models.Number", b =>
                {
                    b.Property<int>("NumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumberId"), 1L, 1);

                    b.Property<int>("ShoesNumber")
                        .HasColumnType("int");

                    b.HasKey("NumberId");

                    b.ToTable("Numbers");

                    b.HasData(
                        new
                        {
                            NumberId = 1,
                            ShoesNumber = 32
                        },
                        new
                        {
                            NumberId = 2,
                            ShoesNumber = 33
                        },
                        new
                        {
                            NumberId = 3,
                            ShoesNumber = 34
                        },
                        new
                        {
                            NumberId = 4,
                            ShoesNumber = 35
                        },
                        new
                        {
                            NumberId = 5,
                            ShoesNumber = 36
                        },
                        new
                        {
                            NumberId = 6,
                            ShoesNumber = 37
                        },
                        new
                        {
                            NumberId = 7,
                            ShoesNumber = 38
                        },
                        new
                        {
                            NumberId = 8,
                            ShoesNumber = 39
                        },
                        new
                        {
                            NumberId = 9,
                            ShoesNumber = 40
                        },
                        new
                        {
                            NumberId = 10,
                            ShoesNumber = 41
                        },
                        new
                        {
                            NumberId = 11,
                            ShoesNumber = 42
                        },
                        new
                        {
                            NumberId = 12,
                            ShoesNumber = 43
                        },
                        new
                        {
                            NumberId = 13,
                            ShoesNumber = 44
                        },
                        new
                        {
                            NumberId = 14,
                            ShoesNumber = 45
                        },
                        new
                        {
                            NumberId = 15,
                            ShoesNumber = 46
                        });
                });

            modelBuilder.Entity("Entities.Models.Pc", b =>
                {
                    b.Property<int>("PcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PcId"), 1L, 1);

                    b.Property<string>("BellekHızı")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CihazAgirligi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EkranBoyutu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EkranCozunurlugu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EkranYenilemeHizi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RamTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SDDKapasite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("İslemciNesli")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("İslemciTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PcId");

                    b.ToTable("Pc");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProductPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductImage = "dddddd",
                            ProductName = "Tişört",
                            ProductPrice = 150
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductImage = "dddddd",
                            ProductName = "Pantolon",
                            ProductPrice = 350
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductImage = "dddddd",
                            ProductName = "Hırka",
                            ProductPrice = 200
                        });
                });

            modelBuilder.Entity("Entities.Models.ProductComment", b =>
                {
                    b.Property<int>("ProductCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCommentId"), 1L, 1);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCommentId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComments");

                    b.HasData(
                        new
                        {
                            ProductCommentId = 1,
                            CommentId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            ProductCommentId = 2,
                            CommentId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            ProductCommentId = 3,
                            CommentId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.ProductDetails", b =>
                {
                    b.Property<int>("ProductDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDetailsId"), 1L, 1);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberId")
                        .HasColumnType("int");

                    b.Property<int?>("PcId")
                        .HasColumnType("int");

                    b.Property<string>("ProductExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductDetailsId");

                    b.HasIndex("ColorId");

                    b.HasIndex("NumberId");

                    b.HasIndex("PcId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            ProductDetailsId = 1,
                            ColorId = 1,
                            NumberId = 1,
                            ProductExplanation = "ddd",
                            SizeId = 1
                        },
                        new
                        {
                            ProductDetailsId = 2,
                            ColorId = 2,
                            ProductExplanation = "ddd",
                            SizeId = 2
                        },
                        new
                        {
                            ProductDetailsId = 3,
                            ColorId = 3,
                            ProductExplanation = "ddd",
                            SizeId = 3
                        },
                        new
                        {
                            ProductDetailsId = 4,
                            ColorId = 4,
                            ProductExplanation = "ddd",
                            SizeId = 4
                        },
                        new
                        {
                            ProductDetailsId = 5,
                            ColorId = 4,
                            ProductExplanation = "ddd",
                            SizeId = 1
                        },
                        new
                        {
                            ProductDetailsId = 6,
                            ColorId = 5,
                            ProductExplanation = "ddd",
                            SizeId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"), 1L, 1);

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeName = "S"
                        },
                        new
                        {
                            SizeId = 2,
                            SizeName = "M"
                        },
                        new
                        {
                            SizeId = 3,
                            SizeName = "L"
                        },
                        new
                        {
                            SizeId = 4,
                            SizeName = "XL"
                        },
                        new
                        {
                            SizeId = 5,
                            SizeName = "XXL"
                        },
                        new
                        {
                            SizeId = 6,
                            SizeName = "XXXL"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7c7adfea-4d05-4d82-9a7b-7d69c6d784b2",
                            ConcurrencyStamp = "56d2e6d5-aa2c-43bf-83c3-97ebb8cac463",
                            Name = "MANAGER",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "37705d5f-9735-438d-99c8-a0d8dc701659",
                            ConcurrencyStamp = "d20527ef-f87e-464b-9149-bc21eb556010",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.ProductComment", b =>
                {
                    b.HasOne("Entities.Models.Comment", "Comment")
                        .WithMany("ProductComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Comment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.ProductDetails", b =>
                {
                    b.HasOne("Entities.Models.Color", "Color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Number", "Number")
                        .WithMany("ProductDetails")
                        .HasForeignKey("NumberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Pc", "Pc")
                        .WithMany("ProductDetails")
                        .HasForeignKey("PcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("Entities.Models.ProductDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Color");

                    b.Navigation("Number");

                    b.Navigation("Pc");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Gender", null)
                        .WithMany("Users")
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Color", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Navigation("ProductComments");
                });

            modelBuilder.Entity("Entities.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.Number", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Entities.Models.Pc", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("ProductComments");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Entities.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
